new_discoveries <- list(unique(itersets_result[[1]])) # call all of the sets in the first iteration new discoveries
for (i in 2:length(itersets_result)) { # for each iteration, 2 to max
all_previous <- unlist(itersets_result[1:(i-1)])
current_set <- unlist(itersets_result[i])
n <- setdiff(current_set,all_previous) # returns what is in current_set and not in all_previous
new_discoveries <- c(new_discoveries,list(n))
}
return(new_discoveries)
}
# example usage
cumulative_novel_counts(sets)
# the percentage of new systems discovered, out of the total discovery attempts in that iteration
cumulative_discovery_rate <- function(df_name,system_type) {
new_discoveries <- cumulative_novel_counts(itersets(df_name,system_type))
tries <- itertries(df_name,system_type)
return(lengths(new_discoveries)/tries)
}
# plot percentage of tries that yielded a novel discovery per iteration
rate_plot <- function(e1i,e1c,e2i,e2c,title,ymax) {
time <- seq(1,15)
plot(time,e2c,las=1,ylim=c(0,ymax),type="l",lty="dotted",col="red",ylab="proportion discovered",xlab="iteration",main=title)
lines(e1i,type="l")
lines(e1c,type="l",lty="dotted")
lines(e2i,type="l",col="red")
legend(10, ymax, cex=0.8, legend=c("Exp1 individual", "Exp1 cultural","Exp2 individual", "Exp2 cultural"),
col=c("black", "black","red", "red"),
lty=c("solid","dotted","solid","dotted"))
}
# Experiment 1
e1i_512 <- cumulative_discovery_rate(df1i,512)
e1c_512 <- cumulative_discovery_rate(df1c,512)
# Experiment 2
e2i_512 <- cumulative_discovery_rate(df2i,512)
e2c_512 <- cumulative_discovery_rate(df2c,512)
e1i_512
e1c_512
rate_plot(e1i_512,e1c_512,e2i_512,e2c_512,"discovery rate - 512 systems",1)
# Experiment 1
e1i_1024 <- cumulative_discovery_rate(df1i,1024)
e1c_1024 <- cumulative_discovery_rate(df1c,1024)
# Experiment 2
e2i_1024 <- cumulative_discovery_rate(df2i,1024)
e2c_1024 <- cumulative_discovery_rate(df2c,1024)
rate_plot(e1i_1024,e1c_1024,e2i_1024,e2c_1024,"discovery rate - 1024 systems",1)
sets <- itersets(df1i,512)     # uniques within each iteration
cumulative_novel_counts(sets)  # uniques
lengths(cumulative_novel_counts(itersets(df1i,512)))
space_discovery <- function(df_name,system_type) {
x <- lengths(cumulative_novel_counts(itersets(df_name,system_type)))
discovered <- c()  # cumulative discoveries by each iteration
for (i in 1:length(x)) {
discovered <- c(discovered,sum(x[1:i]))
}
return(discovered/system_type)
}
# example usage
space_discovery(df1i,512)
a <- space_discovery(df1i,512)
b <- space_discovery(df1c,512)
c <- space_discovery(df2i,512)
d <- space_discovery(df2c,512)
rate_plot(a,b,c,d,"expansion rate - 512 systems",0.5)
a <- space_discovery(df1i,1024)
b <- space_discovery(df1c,1024)
c <- space_discovery(df2i,1024)
d <- space_discovery(df2c,1024)
rate_plot(a,b,c,d,"expansion rate - 1024 systems",0.5)
# all iteration = 1 should have discovery = 1
subset(df1,iteration==1)$local_discovery_512
subset(df1,iteration==1)$global_discovery_512
subset(df1,iteration==1)$local_discovery_1024
subset(df1,iteration==1)$global_discovery_1024
local_global_maker <- function(df,system_type) {  # system_type = 512 or 1024
local_discovery <- c()  # is this system new to the chain? (not in previous iterations in this chain)
global_discovery <- c() # is this system new to the world? (not in previous iterations in all chains)
# loop through each system (row) in the dataframe
for (i in 1:nrow(df)) {
#for (i in 1:10) {
current_system <- df[i,system_type]     # grab the current system
current_trajectory <- df[i,]$trajectory # look up the trajectory ID of the current system (chain is for C only)
current_iteration <- df[i,]$iteration   # look up what iteration it is
# get all systems from the previous iterations in that chain
temp <- subset(df,trajectory==current_trajectory)
previous_local <- subset(temp,iteration<current_iteration)[[system_type]] # can be empty
# check if current system already exists in the previous systems (setdiff(a,b) returns what is in a and not in b)
n <- length(setdiff(current_system,previous_local))  # returns 0 if current_system is not new, 1 if it is
local_discovery <- c(local_discovery,n) # add boolean value to the new column we're creating
# check if the current system already exists in previous systems of ALL the chains in the respective condition
current_condition <- df[i,]$condition
temp <- subset(df,condition==current_condition)
previous_global <- subset(temp,iteration<current_iteration)[[system_type]]
n <- length(setdiff(current_system,previous_global))
global_discovery <- c(global_discovery,n)
}
return(list(local_discovery,global_discovery))
}
# btw, here's how to access a dataframe column using a variable in place of the column name (por fin!):
system_type <- "system1024"
df1[[system_type]]
# add columns for both systems to df1
local_discovery_512 <- local_global_maker(df1,"system512")[[1]]
global_discovery_512 <- local_global_maker(df1,"system512")[[2]]
local_discovery_1024 <- local_global_maker(df1,"system1024")[[1]]
global_discovery_1024 <- local_global_maker(df1,"system1024")[[2]]
df1 <- cbind(df1,local_discovery_512,global_discovery_512,local_discovery_1024,global_discovery_1024)
head(df1)
# all iteration = 1 should have discovery = 1
subset(df1,iteration==1)$local_discovery_512
subset(df1,iteration==1)$global_discovery_512
subset(df1,iteration==1)$local_discovery_1024
subset(df1,iteration==1)$global_discovery_1024
df1i <- subset(df1,condition=="I")  # 435 rows
df1c <- subset(df1,condition=="C")  # 207 rows
df1i$local_discovery_1024
df1c$local_discovery_1024
sqrt(1024)
32**2
32*32
head(df1)
df1i <- subset(df1,condition=="I")  # 435 rows
df1c <- subset(df1,condition=="C")  # 207 rows
table(df1c$iteration)
subset(df1c,iteration==0)$local_discovery_1024
subset(df1c,iteration==1)$local_discovery_1024
table(subset(df1c,iteration==1)$local_discovery_1024)
table(subset(df1c,iteration==2)$local_discovery_1024)
table(subset(df1c,iteration==3)$local_discovery_1024)
table(subset(df1c,iteration==4)$local_discovery_1024)
table(subset(df1c,iteration==5)$local_discovery_1024)
table(subset(df1c,iteration==6)$local_discovery_1024)
table(subset(df1c,iteration==7)$local_discovery_1024)
table(subset(df1c,iteration==8)$local_discovery_1024)
table(df1i$iteration)
table(subset(df1i,iteration==1)$local_discovery_1024)
table(subset(df1i,iteration==2)$local_discovery_1024)
table(subset(df1i,iteration==3)$local_discovery_1024)
table(subset(df1i,iteration==4)$local_discovery_1024)
table(subset(df1i,iteration==5)$local_discovery_1024)
table(subset(df1i,iteration==6)$local_discovery_1024)
table(subset(df1i,iteration==7)$local_discovery_1024)
table(subset(df1i,iteration==8)$local_discovery_1024)
all <- table(df1i$iteration) # all chains still going at each iteration
all
all[2]
as.vector(all)
all <- as.vector(table(df1i$iteration)) # all chains still going at each iteration
all
5/all
c1_all <- as.vector(table(df1c$iteration)) # all chains still going at each iteration
c1_news <- c(45,32,33,18,14,10,7,5)
c1_olds <- c(0,13,10,6,6,4,4,2)
c1_olds/c1_all
c1_all
length(c1_all)
length(c1_olds)
c1_all <- as.vector(table(df1c$iteration))[1:8] # all chains still going at each iteration
c1_all
i1_all <- as.vector(table(df1i$iteration)) # all chains still going at each iteration
length()
length(i1_all)
c1_olds/c1_all
round(c1_olds/c1_all)
round(c1_olds/c1_all,2)
round(c1_olds/c1_all,2) # proportion of reinventions
i1_all <- as.vector(table(df1i$iteration)) # all chains still going at each iteration
i1_news <- c(90,78,56,34,24,16,15,8) # number of current systems that are novel
i1_olds <- c(0,12,22,29,17,16,7,11)     # number that are reinventions
round(i1_olds/i1_all,2) # proportion of reinventions
c1prs <- c1_olds/c1_all
i1prs <- i1_olds/i1_all
c1prs
i1prs
mean(c1prs)
mean(i1prs)
45-32
22-6
22-18
18-14
10-7
45-32
d <- data.frame(iter=seq(1,9),yval=c(c1prs,i1prs),group=c(rep("C",9),rep("I",9)))
seq(1,9)
rep(seq(1,9),2)
c(c1prs,i1prs)
c(rep("C",9),rep("I",9))
d <- data.frame(iter=rep(seq(1,9),2),yval=c(c1prs,i1prs),group=c(rep("C",9),rep("I",9)))
length(c(c1prs,i1prs))
d <- data.frame(iter=rep(seq(1,8),2),yval=c(c1prs,i1prs),group=c(rep("C",8),rep("I",8)))
d
d <- data.frame(iter=rep(seq(1,8),2),yval=c(c1prs,i1prs),type=c(rep("C",8),rep("I",8)))
p <- ggplot(d, aes(x=iter, y=yval, group=type, color=type)) +
geom_line() + geom_points()
require(ggplot2)
d <- data.frame(iter=rep(seq(1,8),2),yval=c(c1prs,i1prs),type=c(rep("C",8),rep("I",8)))
p <- ggplot(d, aes(x=iter, y=yval, group=type, color=type)) +
geom_line() + geom_points()
p <- ggplot(d, aes(x=iter, y=yval, group=type, color=type)) +
geom_line() + geom_point()
d <- data.frame(iter=rep(seq(1,8),2),yval=c(c1prs,i1prs),type=c(rep("C",8),rep("I",8)))
p <- ggplot(d, aes(x=iter, y=yval, group=type, color=type)) +
geom_line() + geom_point()
p
p <- ggplot(d, aes(x=iter, y=yval, group=type, color=type)) +
geom_smooth(se = FALSE, method = "gam", formula = y ~ s(log(x))
p <- ggplot(d, aes(x=iter, y=yval, group=type, color=type)) +
geom_line() + geom_point() +
geom_smooth(se = FALSE, method = "gam", formula = y ~ s(log(x)))
p
p <- ggplot(d, aes(x=iter, y=yval, group=type, color=type)) +
geom_line() + geom_point() +
geom_smooth(se=FALSE, method="loess", span=0.5)
p
d <- data.frame(iter=rep(seq(1,8),2),yval=c(c1prs,i1prs),type=c(rep("C",8),rep("I",8)))
p <- ggplot(d, aes(x=iter, y=yval, group=type, color=type)) +
geom_line() + geom_point() +
geom_smooth(se=FALSE, method="gam", span=0.5)
p
p <- ggplot(d, aes(x=iter, y=yval, group=type, color=type)) +
geom_line() + geom_point() +
geom_smooth(se=FALSE, method="gam", formula = y ~ s(log(x)))
p
p <- ggplot(d, aes(x=iter, y=yval, group=type, color=type)) +
geom_line() + geom_point() +
stat_smooth(se=FALSE, method="gam", formula = y ~ s(log(x)))
p
p <- ggplot(d, aes(x=iter, y=yval, group=type, color=type)) +
geom_line() + geom_point()
p
df1 <- readRDS("../Data/experiment1.rds")
df1 <- readRDS("../Data/experiment1.rds")
df1
df1 <- readRDS("/Users/vferdinand/Library/Mobile Documents/com~apple~CloudDocs/Research/PROJECTS/Category Change/GITHUB REPO/Data/experiment1.rds")
df1 <- readRDS("/Users/vferdinand/Library/Mobile Documents/com~apple~CloudDocs/Research/PROJECTS/Category Change/GITHUB REPO/Data/experiment1.rds")
df2 <- readRDS("/Users/vferdinand/Library/Mobile Documents/com~apple~CloudDocs/Research/PROJECTS/Category Change/GITHUB REPO/Data/experiment2.rds")
a <- "1111100000"
b <- "1011100000" # 1 change
c <- "0111100001" # 2 changes
d <- "1101011101" # 6 changes
# Levenshtein distance function is adist()
# will just give the number of labels that flipped
adist(a,b)
adist(a,c)
adist(a,d)
# try it on two strings in the dataframe
a <- df1$system512[1]
b <- df1$system512[6]
adist(a,b)
# get edit distance for each pair of input-output systems in the data
get_edits_512 <- function(d) {
edits <- c()
for (i in 1:nrow(d)) {
edit <- adist(d$system512_input[i],d$system512[i])
#print(d$system512_input[i])
#print(d$system512[i])
#print(edit)
edits <- c(edits,edit)
}
return(edits)
}
# append new column to each dataframe - contains the number of label flips (edits) between input and output 512 system
edits <- get_edits_512(df1)
df1 <- cbind(df1,edits)
edits <- get_edits_512(df2)
df2 <- cbind(df2,edits)
df1c <- subset(df1,condition=="C")
df1i <- subset(df1,condition=="I")
df2c <- subset(df2,condition=="C")
df2i <- subset(df2,condition=="I")
head(df1)
#####################################
# Does it have to use the 1024 system or are the answers the same anyway using the 512 system?
get_edits_1024 <- function(d) {
edits <- c()
for (i in 1:nrow(d)) {
edit <- adist(d$system1024_input[i],d$system1024[i])
edits <- c(edits,edit)
}
return(edits)
}
e1 <- get_edits_512(df1)
e2 <- get_edits_1024(df1)
e1
e2
e1==e2
e1==e2
table(e1==e2)
# get edit distance for each pair of input-output systems in the data
get_edits_512 <- function(d) {
edits <- c()
for (i in 1:nrow(d)) {
edit <- adist(d$system512_input[i],d$system512[i])
#print(d$system512_input[i])
#print(d$system512[i])
#print(edit)
edits <- c(edits,edit)
}
return(edits)
}
# append new column to each dataframe - contains the number of label flips (edits) between input and output 512 system
edits512 <- get_edits_512(df1)
df1 <- cbind(df1,edits)
edits512 <- get_edits_512(df2)
df2 <- cbind(df2,edits)
df1 <- readRDS("/Users/vferdinand/Library/Mobile Documents/com~apple~CloudDocs/Research/PROJECTS/Category Change/GITHUB REPO/Data/experiment1.rds")
df2 <- readRDS("/Users/vferdinand/Library/Mobile Documents/com~apple~CloudDocs/Research/PROJECTS/Category Change/GITHUB REPO/Data/experiment2.rds")
# get edit distance for each pair of input-output systems in the data
get_edits_512 <- function(d) {
edits <- c()
for (i in 1:nrow(d)) {
edit <- adist(d$system512_input[i],d$system512[i])
#print(d$system512_input[i])
#print(d$system512[i])
#print(edit)
edits <- c(edits,edit)
}
return(edits)
}
# append new column to each dataframe - contains the number of label flips (edits) between input and output 512 system
edits512 <- get_edits_512(df1)
df1 <- cbind(df1,edits512)
edits512 <- get_edits_512(df2)
df2 <- cbind(df2,edits512)
head(df1)
df1 <- readRDS("/Users/vferdinand/Library/Mobile Documents/com~apple~CloudDocs/Research/PROJECTS/Category Change/GITHUB REPO/Data/experiment1.rds")
df2 <- readRDS("/Users/vferdinand/Library/Mobile Documents/com~apple~CloudDocs/Research/PROJECTS/Category Change/GITHUB REPO/Data/experiment2.rds")
# append new column to each dataframe - contains the number of label flips (edits) between input and output 512 system
edits512 <- get_edits_512(df1)
df1 <- cbind(df1,edits512)
edits512 <- get_edits_512(df2)
df2 <- cbind(df2,edits512)
get_edits_1024 <- function(d) {
edits <- c()
for (i in 1:nrow(d)) {
edit <- adist(d$system1024_input[i],d$system1024[i])
edits <- c(edits,edit)
}
return(edits)
}
# SANITY CHECK
e1 <- get_edits_512(df1)
e2 <- get_edits_1024(df1)
table(e1==e2) # 600 were the same number of edits, but 42 were different!
edits1024 <- get_edits_1024(df1)
df1 <- cbind(df1,edits1024)
edits1024 <- get_edits_1024(df2)
df2 <- cbind(df2,edits1024)
head(df1)
head(df2)
table(get_edits_512(df1)==get_edits_1024(df1))
table(get_edits_512(df2)==get_edits_1024(df2)) #
df1c <- subset(df1,condition=="C")
df1i <- subset(df1,condition=="I")
df2c <- subset(df2,condition=="C")
df2i <- subset(df2,condition=="I")
head(df1c)
df1c[9,]
get_edits_1024("0111110001","1100000110")
adist("0111110001","1100000110")
e <- "0111110001"
f <- "1100000110"
adist(e,f)
drop(attr(adist(e, f, counts = TRUE), "counts"))
e==f
e[1]
strsplit(c(e, f), split = "")
setdiff(strsplit(c(e, f), split = ""))
setdiff(strsplit(e, split = ""),strsplit(f, split = ""))
setdiff(strsplit(e, split = ""),strsplit(f, split = ""))
strsplit(e, split = "")==strsplit(f, split = "")
e <- "0111110001"
f <- "1100000110"
strsplit(e, split = "")[1]==strsplit(f, split = "")[1]
strsplit(e, split = "")[1]
strsplit(e, split = "")[[1]]==strsplit(f, split = "")[1]
strsplit(e, split = "")[[1]]
strsplit(e, split = "")[[1]]==strsplit(f, split = "")[[1]]
# make another function to compute the raw flips
strsplit(e, split = "")[[1]]==strsplit(f, split = "")[[1]]
# make another function to compute the raw flips
sum(strsplit(e, split = "")[[1]]==strsplit(f, split = "")[[1]])
e
f
# make another function to compute the raw flips
differences <- function(string1,string2) {
a <- strsplit(string1, split = "")[[1]]
b <- strsplit(string2, split = "")[[1]]
ans <- sum(a==b)
return(ans)
}
differences(e,f)
# make another function to compute the raw flips
differences <- function(string1,string2) {
a <- strsplit(string1, split = "")[[1]]
b <- strsplit(string2, split = "")[[1]]
ans <- length(a==b)-sum(a==b)
return(ans)
}
differences(e,f)
# make another function to compute the raw flips
differences <- function(string1,string2) {
a <- strsplit(string1, split = "")[[1]]
b <- strsplit(string2, split = "")[[1]]
ans <- length(a==b)-sum(a==b)
return(ans)
}
# example usage:
differences(e,f)
diffs
# make another function to compute the raw flips
diffs <- function(string1,string2) {
a <- strsplit(string1, split = "")[[1]]
b <- strsplit(string2, split = "")[[1]]
ans <- length(a==b)-sum(a==b)
return(ans)
}
# example usage:
diffs(e,f)
# get edit distance for each pair of input-output systems in the data
get_edits_512 <- function(d) {
edits <- c()
for (i in 1:nrow(d)) {
edit <- adist(d$system512_input[i],d$system512[i]) # comment in to use Levenshtein distance
edit <- diffs(d$system512_input[i],d$system512[i])
#print(d$system512_input[i])
#print(d$system512[i])
#print(edit)
edits <- c(edits,edit)
}
return(edits)
}
# get edit distance for each pair of input-output systems in the data
get_edits_512 <- function(d) {
edits <- c()
for (i in 1:nrow(d)) {
#edit <- adist(d$system512_input[i],d$system512[i]) # comment in to use Levenshtein distance
edit <- diffs(d$system512_input[i],d$system512[i]) # comment in to use raw # differences
#print(d$system512_input[i])
#print(d$system512[i])
#print(edit)
edits <- c(edits,edit)
}
return(edits)
}
df1 <- readRDS("/Users/vferdinand/Library/Mobile Documents/com~apple~CloudDocs/Research/PROJECTS/Category Change/GITHUB REPO/Data/experiment1.rds")
df2 <- readRDS("/Users/vferdinand/Library/Mobile Documents/com~apple~CloudDocs/Research/PROJECTS/Category Change/GITHUB REPO/Data/experiment2.rds")
# make another function to compute the raw flips
diffs <- function(string1,string2) {
a <- strsplit(string1, split = "")[[1]]
b <- strsplit(string2, split = "")[[1]]
ans <- length(a==b)-sum(a==b)
return(ans)
}
# example usage:
diffs(e,f)
# get edit distance for each pair of input-output systems in the data
get_edits_512 <- function(d) {
edits <- c()
for (i in 1:nrow(d)) {
#edit <- adist(d$system512_input[i],d$system512[i]) # comment in to use Levenshtein distance
edit <- diffs(d$system512_input[i],d$system512[i]) # comment in to use raw # differences
#print(d$system512_input[i])
#print(d$system512[i])
#print(edit)
edits <- c(edits,edit)
}
return(edits)
}
# append new column to each dataframe - contains the number of label flips (edits) between input and output 512 system
edits512 <- get_edits_512(df1)
df1 <- cbind(df1,edits512)
edits512 <- get_edits_512(df2)
df2 <- cbind(df2,edits512)
get_edits_1024 <- function(d) {
edits <- c()
for (i in 1:nrow(d)) {
#edit <- adist(d$system1024_input[i],d$system1024[i])
edit <- diffs(d$system1024_input[i],d$system1024[i])
edits <- c(edits,edit)
}
return(edits)
}
# SANITY CHECK
table(get_edits_512(df1)==get_edits_1024(df1)) # 600 were the same number of edits, but 42 were different!
table(get_edits_512(df2)==get_edits_1024(df2)) # 609 same, 83 different
edits1024 <- get_edits_1024(df1)
df1 <- cbind(df1,edits1024)
edits1024 <- get_edits_1024(df2)
df2 <- cbind(df2,edits1024)
df1c <- subset(df1,condition=="C")
df1i <- subset(df1,condition=="I")
df2c <- subset(df2,condition=="C")
df2i <- subset(df2,condition=="I")
head(df1)
head(df2)
#####################################
# Which systems showed zero edits? These should be fairly stable systems.  124 systems
subset(df1,edits==0)$system512
# What were their number of boundaries?   1-5 boundaries, all >5 were unstable
table(subset(df1,edits==0)$N_boundaries)
# show many of each zero-edit event occurred per zero-edit system
table(subset(df1,edits==0)$system512,subset(df1,edits==0)$edits)
# Which systems showed zero edits? These should be fairly stable systems.  124 systems
subset(df1,edits512==0)$system512
length(subset(df1,edits512==0)$system512)
table(subset(df1,edits512==0)$system512,subset(df1,edits512==0)$edits)
table(subset(df1,edits512==0)$system512,subset(df1,edits512==0)$edits512)
# check 1024 systems and edits also
table(subset(df1,edits1024==0)$system1024,subset(df1,edits1024==0)$edits1024)
table(df1$N_boundaries_input,df1$N_boundaries)
# check for Experiment 2
table(subset(df2,edits512==0)$system512,subset(df2,edits512==0)$edits512)
table(subset(df2,edits1024==0)$system1024,subset(df2,edits1024==0)$edits1024)
