p_disjoint <- c(length(subset(iter1,systype_input=="disjoint")$X))
# now use the output systems
for (i in 1:max(d$iteration)) {
iter <- subset(d,iteration==i)
total <- c(total,length(iter$X))
p_degenerate <- c(p_degenerate,length(subset(iter,systype_input=="degenerate")$X))
p_continuous <- c(p_continuous,length(subset(iter,systype_input=="continuous")$X))
p_disjoint <- c(p_disjoint,length(subset(iter,systype_input=="disjoint")$X))
}
# sanity check that these all equal the total
unique((p_degenerate+p_continuous+p_disjoint)==total)
p_degenerate <- p_degenerate/total
p_continuous <- p_continuous/total
p_disjoint <- p_disjoint/total
p_degenerate
p_continuous
p_disjoint
# plot the type of each catsys over time
time <- seq(1,12)
plot(time,p_degenerate,type="line",las=1,ylim=c(0,1),lty="dotted")
lines(time,p_continuous)
lines(time,p_disjoint,lty="twodash")
d <- df2
# get strategy proportions over time
iter1 <- subset(d,iteration==1)
# initialize with the input to iteration 1
iter1 <- subset(d,iteration==1) #table(iter1$systype_input)
total <- c(length(iter1$X)) # total number of systems (use for normalizing each p)
p_degenerate <- c(length(subset(iter1,systype_input=="degenerate")$X))
p_continuous <- c(length(subset(iter1,systype_input=="continuous")$X))
p_disjoint <- c(length(subset(iter1,systype_input=="disjoint")$X))
# now use the output systems
for (i in 1:max(d$iteration)) {
iter <- subset(d,iteration==i)
total <- c(total,length(iter$X))
p_degenerate <- c(p_degenerate,length(subset(iter,systype_input=="degenerate")$X))
p_continuous <- c(p_continuous,length(subset(iter,systype_input=="continuous")$X))
p_disjoint <- c(p_disjoint,length(subset(iter,systype_input=="disjoint")$X))
}
# sanity check that these all equal the total
unique((p_degenerate+p_continuous+p_disjoint)==total)
p_degenerate <- p_degenerate/total
p_continuous <- p_continuous/total
p_disjoint <- p_disjoint/total
p_degenerate
p_continuous
p_disjoint
p_degenerate
p_continuous
p_disjoint
time <- seq(1,12)
plot(time,p_degenerate,type="line",las=1,ylim=c(0,1),lty="dotted")
plot(time,p_degenerate,type="line",las=1,ylim=c(0,1),lty="dotted")
lines(time,p_continuous)
lines(time,p_disjoint,lty="twodash")
time <- seq(1,length(total))
plot(time,p_degenerate,type="line",las=1,ylim=c(0,1),lty="dotted")
lines(time,p_continuous)
lines(time,p_disjoint,lty="twodash")
d <- df1
# get strategy proportions over time
iter1 <- subset(d,iteration==1)
# initialize with the input to iteration 1
iter1 <- subset(d,iteration==1) #table(iter1$systype_input)
total <- c(length(iter1$X)) # total number of systems (use for normalizing each p)
p_degenerate <- c(length(subset(iter1,systype_input=="degenerate")$X))
p_continuous <- c(length(subset(iter1,systype_input=="continuous")$X))
p_disjoint <- c(length(subset(iter1,systype_input=="disjoint")$X))
# now use the output systems
for (i in 1:max(d$iteration)) {
iter <- subset(d,iteration==i)
total <- c(total,length(iter$X))
p_degenerate <- c(p_degenerate,length(subset(iter,systype_input=="degenerate")$X))
p_continuous <- c(p_continuous,length(subset(iter,systype_input=="continuous")$X))
p_disjoint <- c(p_disjoint,length(subset(iter,systype_input=="disjoint")$X))
}
# sanity check that these all equal the total
unique((p_degenerate+p_continuous+p_disjoint)==total)
p_degenerate <- p_degenerate/total
p_continuous <- p_continuous/total
p_disjoint <- p_disjoint/total
p_degenerate
p_continuous
p_disjoint
# plot the type of each catsys over time
time <- seq(1,length(total))
plot(time,p_degenerate,type="line",las=1,ylim=c(0,1),lty="dotted")
lines(time,p_continuous)
lines(time,p_disjoint,lty="twodash")
# create a random label flipping process
# keep track to the transition probabilities between system types
# use as random baseline for the observed transition probabilites
# will tell you how the human adjecent possible space differs from a standard theoretical a.p. space
require(gtools) # for permutations()
require(stringr)
##########################################################################
# get and initial set to mutate
##########################################################################
# can be the 1024 or the random initial ones only
get_1024 <- function() {
# generate one of each of the 1024 systems
x <- permutations(2, 10, c(0,1), repeats.allowed=TRUE)
# collapse each row into a string
the_set <- apply(x,1,paste,collapse="")
return(the_set)
}
# example usage:
set1024 <- get_1024()
get_inits <- function() {
inits <- c()
set1024 <- get_1024()
for (i in set1024) {
if (str_count(i,"0") == 5) {
inits <- c(inits,i)
}
}
return(inits)
}
# example usage:
inits <- get_inits()
##########################################################################
# mutation process
##########################################################################
# for each string, randomly flip one of its elements to the other binary value
rando_flipper <- function(set) { # input = a list of strings
new_set <- c()
for (i in set) {
rand <- sample(seq(1,10),1)
chosen <- substr(i,rand,rand)
if (chosen == "0") { new_val = "1" } else { new_val = "0" }
substr(i,rand,rand) <- new_val  # changes string in place
new_set <- c(new_set,i)
}
return(new_set)
}
# example usage
rando_flipper(set1024)
##########################################################################
# get a whole bunch of input sets
##########################################################################
repeats <- 10
# repeat the set several times and concatenate them all into a column called inputs
inputs <- rep(get_1024(),repeats)
# then mutate them all into a column called outputs
outputs <- rando_flipper(inputs)
d <- data.frame(inputs,outputs)
##########################################################################
# add columns to the dataframe
##########################################################################
# compute number of boundaries per system
get_N_boundaries <- function(d) {
boundaries01 <- str_count(d, pattern = "01")
boundaries10 <- str_count(d, pattern = "10")
return(boundaries01+boundaries10)
}
# classify type of system
get_systype <- function(d) {
return(ifelse(d==0, "-degenerate", ifelse(d==1, "continous", "disjoint")))
}
add_cols <- function() {
input_N <- get_N_boundaries(d$inputs)
output_N <- get_N_boundaries(d$outputs)
d <- cbind(d,input_N,output_N)
input_type <- get_systype(d$input_N)
output_type <- get_systype(d$output_N)
d <- cbind(d,input_type,output_type)
return(d)
}
repeats <- 10
inputs <- rep(get_1024(),repeats)
outputs <- rando_flipper(inputs)
d <- data.frame(inputs,outputs)
d <- add_cols()
counts <- table(d$input_type,d$output_type)
p <- counts/rowSums(counts)
table(d$output_type)
repeats <- 10
inputs <- rep(get_1024(),repeats)
outputs <- rando_flipper(inputs)
d <- data.frame(inputs,outputs)
d <- add_cols()
counts <- table(d$input_type,d$output_type)
p <- counts/rowSums(counts)
table(d$output_type)
df1 <- read.csv("/Users/vanferdi/Library/Mobile Documents/com~apple~CloudDocs/Research/PROJECTS/Category Change/GITHUB REPO/Data/experiment1_FINAL.csv")
df2 <- read.csv("/Users/vanferdi/Library/Mobile Documents/com~apple~CloudDocs/Research/PROJECTS/Category Change/GITHUB REPO/Data/experiment2_FINAL.csv")
df1c <- subset(df1,condition=="C")
df1i <- subset(df1,condition=="I")
df2c <- subset(df2,condition=="C")
df2i <- subset(df2,condition=="I")
a <- "1111100000"
b <- "1011100000" # 1 change
c <- "0111100001" # 2 changes
d <- "1101011101" # 6 changes
# Levenshtein distance function is adist()
# will just give the number of labels that flipped
adist(a,b)
adist(a,c)
adist(a,d)
# try it on two strings in the dataframe
a <- df1$system512[1]
b <- df1$system512[6]
adist(a,b)
get_edits_512 <- function(d) {
edits <- c()
for (i in 1:nrow(d)) {
edit <- adist(d$system512_input[i],d$system512[i])
#print(d$system512_input[i])
#print(d$system512[i])
#print(edit)
edits <- c(edits,edit)
}
return(edits)
}
# append new column to each dataframe - contains the number of label flips (edits) between input and output 512 system
edits <- get_edits_512(df1)
df1 <- cbind(df1,edits)
edits <- get_edits_512(df2)
df2 <- cbind(df2,edits)
#####################################
# Does it have to use the 1024 system or are the answers the same anyway using the 512 system?
get_edits_1024 <- function(d) {
edits <- c()
for (i in 1:nrow(d)) {
edit <- adist(d$system1024_input[i],d$system1024[i])
edits <- c(edits,edit)
}
return(edits)
}
e1 <- get_edits_512(df1)
e2 <- get_edits_1024(df1)
# ah crap that style of answer doesn't work because the 1024 systems initial zeros are removed!
cbind(e1,e2,df1$system1024)
#####################################
# Which systems showed zero edits?   124 systems
subset(df1,edits==0)$system512
# What were their number of boundaries?   1-5 boundaries, all >5 were unstable
table(subset(df1,edits==0)$N_boundaries)
# show many of each zero-edit event occurred per zero-edit system
table(subset(df1,edits==0)$system512,subset(df1,edits==0)$edits)
# the most stable system is 1111100000
# had 19 perfect reproductions (19 is the max for zero-edit systems)
# For all edit distances, show edit distance by number of boundaries (left = boundaries, right = number of edits)
table(df1$N_boundaries,df1$edits)
# TO DO - plot the table above nicely
##########################################################################
# what are the TPs among N_boundaries?
table(df1$N_boundaries_input,df1$N_boundaries)
" in is rows, out is on top"
"   1   2   3   4   5   6   7   8
1 177   0  11   2   1   0   0   0
2  12  78   8   8   0   0   0   0
3  46   1  42   4   7   2   1   1
4   3  37   7  28   2   7   1   1
5  20   4  18   4  25   0   3   0
6   8  10   7  16   3   5   0   0
7   8   2   6   3   2   2   1   0
8   0   1   1   4   0   0   2   0"
systype_input <- if(df1$N_boundaries_input==1){"continuous"}
ifelse(df1$N_boundaries_input==1, "continuous", "disjoint")
systype_input <- ifelse(df2$N_boundaries_input==0, "-degenerate", ifelse(df2$N_boundaries_input==1, "continuous", "disjoint"))
cbind(df2$N_boundaries_input,x)
##########################################################################
# what are the TPs among continuous and disjoint systems?
# add to df a column that categorizes input and output systems into 3 types
systype_input <- ifelse(df1$N_boundaries_input==0, "-degenerate", ifelse(df1$N_boundaries_input==1, "continuous", "disjoint"))
systype_output <- ifelse(df1$N_boundaries==0, "-degenerate", ifelse(df1$N_boundaries==1, "continuous", "disjoint"))
df1 <- cbind(df1,systype_input,systype_output)
systype_input <- ifelse(df2$N_boundaries_input==0, "-degenerate", ifelse(df2$N_boundaries_input==1, "continuous", "disjoint"))
systype_output <- ifelse(df2$N_boundaries==0, "-degenerate", ifelse(df2$N_boundaries==1, "continuous", "disjoint"))
df2 <- cbind(df2,systype_input,systype_output)
a <- table(df1$systype_input,df1$systype_output)
a
b <- table(df2$systype_input,df2$systype_output)
b
all_ins <- unlist(list(df1$systype_input,df2$systype_input))
all_outs <- unlist(list(df1$systype_output,df2$systype_output))
all <- table(all_ins,all_outs)
pall <- all/rowSums(all)
stat_dist <- function(matrix) { # returns the stationary distribution of a RIGHT stochastic matrix (rows sum to one)
vec <- eigen(t(matrix))$vectors[,1]
return(vec/sum(vec))
}
stat_dist(pall) # 0.6264775 0.3299556 0.0435669
d <- df1
iter1 <- subset(d,iteration==1)
iter1 <- subset(d,iteration==1) #table(iter1$systype_input)
total <- c(length(iter1$X)) # total number of systems (use for normalizing each p)
p_degenerate <- c(length(subset(iter1,systype_input=="degenerate")$X))
p_continuous <- c(length(subset(iter1,systype_input=="continuous")$X))
p_disjoint <- c(length(subset(iter1,systype_input=="disjoint")$X))
for (i in 1:max(d$iteration)) {
iter <- subset(d,iteration==i)
total <- c(total,length(iter$X))
p_degenerate <- c(p_degenerate,length(subset(iter,systype_input=="degenerate")$X))
p_continuous <- c(p_continuous,length(subset(iter,systype_input=="continuous")$X))
p_disjoint <- c(p_disjoint,length(subset(iter,systype_input=="disjoint")$X))
}
unique((p_degenerate+p_continuous+p_disjoint)==total)
p_degenerate <- p_degenerate/total
p_continuous <- p_continuous/total
p_disjoint <- p_disjoint/total
p_degenerate
p_continuous
p_disjoint
time <- seq(1,length(total))
plot(time,p_degenerate,type="line",las=1,ylim=c(0,1),lty="dotted")
lines(time,p_continuous)
lines(time,p_disjoint,lty="twodash")
table(df1$systype_input)
table(df1$systype_output)
table(df2$systype_output)
repeats <- 10
inputs <- rep(get_inits(),repeats)
outputs <- rando_flipper(inputs)
d <- data.frame(inputs,outputs)
d <- add_cols()
counts <- table(d$input_type,d$output_type)
counts
p <- counts/rowSums(counts)
table(d$output_type)
p
# create dataframe
repeats <- 10
inputs <- rep(get_1024(),repeats)
outputs <- rando_flipper(inputs)
d <- data.frame(inputs,outputs)
d <- add_cols()
# get transition probabilties - among types
counts <- table(d$input_type,d$output_type)
p <- counts/rowSums(counts)
p
stat_dist(p)
table(d$output_type)
table(get_systype(get_N_boundaries(get_1024())))/sum(table(get_systype(get_N_boundaries(get_1024()))))
table(get_systype(get_N_boundaries(get_inits())))
table(get_systype(get_N_boundaries(get_inits())))/sum(table(get_systype(get_N_boundaries(get_inits()))))
stat_dist(p)
repeats <- 10
inputs <- rep(get_inits(),repeats)
outputs <- rando_flipper(inputs)
d <- data.frame(inputs,outputs)
d <- add_cols()
counts <- table(d$input_type,d$output_type)
p <- counts/rowSums(counts)
p
repeats <- 10
inputs <- rep(get_inits(),repeats)
outputs <- rando_flipper(inputs)
d <- data.frame(inputs,outputs)
d <- add_cols()
counts <- table(d$input_type,d$output_type)
p <- counts/rowSums(counts)
p
repeats <- 10
inputs <- rep(get_inits(),repeats)
outputs <- rando_flipper(inputs)
d <- data.frame(inputs,outputs)
d <- add_cols()
counts <- table(d$input_type,d$output_type)
p <- counts/rowSums(counts)
p
repeats <- 10
inputs <- rep(get_inits(),repeats)
outputs <- rando_flipper(inputs)
d <- data.frame(inputs,outputs)
d <- add_cols()
counts <- table(d$input_type,d$output_type)
p <- counts/rowSums(counts)
p
repeats <- 100
inputs <- rep(get_inits(),repeats)
outputs <- rando_flipper(inputs)
d <- data.frame(inputs,outputs)
d <- add_cols()
counts <- table(d$input_type,d$output_type)
p <- counts/rowSums(counts)
p
repeats <- 100
inputs <- rep(get_inits(),repeats)
outputs <- rando_flipper(inputs)
d <- data.frame(inputs,outputs)
d <- add_cols()
# get transition probabilties - among types
counts <- table(d$input_type,d$output_type)
p <- counts/rowSums(counts)
p
repeats <- 1000
inputs <- rep(get_inits(),repeats)
outputs <- rando_flipper(inputs)
d <- data.frame(inputs,outputs)
d <- add_cols()
# get transition probabilties - among types
counts <- table(d$input_type,d$output_type)
p <- counts/rowSums(counts)
p
p
stat_dist(p)
df1 <- read.csv("/Users/vanferdi/Library/Mobile Documents/com~apple~CloudDocs/Research/PROJECTS/Category Change/GITHUB REPO/Data/experiment1_FINAL.csv")
df2 <- read.csv("/Users/vanferdi/Library/Mobile Documents/com~apple~CloudDocs/Research/PROJECTS/Category Change/GITHUB REPO/Data/experiment2_FINAL.csv")
df1c <- subset(df1,condition=="C")
df1i <- subset(df1,condition=="I")
df2c <- subset(df2,condition=="C")
df2i <- subset(df2,condition=="I")
a <- "1111100000"
b <- "1011100000" # 1 change
c <- "0111100001" # 2 changes
d <- "1101011101" # 6 changes
# Levenshtein distance function is adist()
# will just give the number of labels that flipped
adist(a,b)
adist(a,c)
adist(a,d)
# try it on two strings in the dataframe
a <- df1$system512[1]
b <- df1$system512[6]
adist(a,b)
get_edits_512 <- function(d) {
edits <- c()
for (i in 1:nrow(d)) {
edit <- adist(d$system512_input[i],d$system512[i])
#print(d$system512_input[i])
#print(d$system512[i])
#print(edit)
edits <- c(edits,edit)
}
return(edits)
}
# append new column to each dataframe - contains the number of label flips (edits) between input and output 512 system
edits <- get_edits_512(df1)
df1 <- cbind(df1,edits)
edits <- get_edits_512(df2)
df2 <- cbind(df2,edits)
#####################################
# Does it have to use the 1024 system or are the answers the same anyway using the 512 system?
get_edits_1024 <- function(d) {
edits <- c()
for (i in 1:nrow(d)) {
edit <- adist(d$system1024_input[i],d$system1024[i])
edits <- c(edits,edit)
}
return(edits)
}
e1 <- get_edits_512(df1)
e2 <- get_edits_1024(df1)
# ah crap that style of answer doesn't work because the 1024 systems initial zeros are removed!
cbind(e1,e2,df1$system1024)
#####################################
# Which systems showed zero edits?   124 systems
subset(df1,edits==0)$system512
# What were their number of boundaries?   1-5 boundaries, all >5 were unstable
table(subset(df1,edits==0)$N_boundaries)
# show many of each zero-edit event occurred per zero-edit system
table(subset(df1,edits==0)$system512,subset(df1,edits==0)$edits)
# the most stable system is 1111100000
# had 19 perfect reproductions (19 is the max for zero-edit systems)
# For all edit distances, show edit distance by number of boundaries (left = boundaries, right = number of edits)
table(df1$N_boundaries,df1$edits)
# TO DO - plot the table above nicely
##########################################################################
# what are the TPs among N_boundaries?
table(df1$N_boundaries_input,df1$N_boundaries)
" in is rows, out is on top"
"   1   2   3   4   5   6   7   8
1 177   0  11   2   1   0   0   0
2  12  78   8   8   0   0   0   0
3  46   1  42   4   7   2   1   1
4   3  37   7  28   2   7   1   1
5  20   4  18   4  25   0   3   0
6   8  10   7  16   3   5   0   0
7   8   2   6   3   2   2   1   0
8   0   1   1   4   0   0   2   0"
systype_input <- if(df1$N_boundaries_input==1){"continuous"}
ifelse(df1$N_boundaries_input==1, "continuous", "disjoint")
systype_input <- ifelse(df2$N_boundaries_input==0, "-degenerate", ifelse(df2$N_boundaries_input==1, "continuous", "disjoint"))
cbind(df2$N_boundaries_input,x)
##########################################################################
# what are the TPs among continuous and disjoint systems?
# add to df a column that categorizes input and output systems into 3 types
systype_input <- ifelse(df1$N_boundaries_input==0, "-degenerate", ifelse(df1$N_boundaries_input==1, "continuous", "disjoint"))
systype_output <- ifelse(df1$N_boundaries==0, "-degenerate", ifelse(df1$N_boundaries==1, "continuous", "disjoint"))
df1 <- cbind(df1,systype_input,systype_output)
systype_input <- ifelse(df2$N_boundaries_input==0, "-degenerate", ifelse(df2$N_boundaries_input==1, "continuous", "disjoint"))
systype_output <- ifelse(df2$N_boundaries==0, "-degenerate", ifelse(df2$N_boundaries==1, "continuous", "disjoint"))
df2 <- cbind(df2,systype_input,systype_output)
a <- table(df1$systype_input,df1$systype_output)
"          continuous disjoint
continuous        177       14
disjoint           97      354
"
b <- table(df2$systype_input,df2$systype_output)
"            degenerate continuous disjoint
degenerate           14          2        3
continuous            4        186       43
disjoint             15        134      291
"
stat_dist(a)
stat_dist(b)    #
pall
a
b
stat_dist(pall)
stat_dist(a)
14/(14+19)
a
a <- a/rowSums(a)
b <- b/rowSums(b)
stat_dist(a)    # 0          0.344747   0.655253
stat_dist(b)    # 0.02973507 0.46628420 0.50398073
b
b
sum(stat_dist(b))
