df1i <- subset(df1,condition=="I")
df2c <- subset(df2,condition=="C")
df2i <- subset(df2,condition=="I")
a <- table(df1$systype_input,df1$systype_output)  # input on left, output on top
"          continuous disjoint
continuous        177       14
disjoint           97      354
"
b <- table(df2$systype_input,df2$systype_output)
"            degenerate continuous disjoint
degenerate           14          2        3
continuous            4        186       43
disjoint             15        134      291
"
all_ins <- unlist(list(df1$systype_input,df2$systype_input))
all_outs <- unlist(list(df1$systype_output,df2$systype_output))
all <- table(all_ins,all_outs)
# normalize to each row sums to one
pall <- all/rowSums(all)
# get stationary distribution
stat_dist <- function(matrix) { # returns the stationary distribution of a RIGHT stochastic matrix (rows sum to one)
vec <- eigen(t(matrix))$vectors[,1]
return(vec/sum(vec))
}
stat_dist(pall) # 0.6264775  0.3299556  0.0435669
a <- a/rowSums(a)
b <- b/rowSums(b)
stat_dist(a)    # 0          0.7458234  0.2541766
stat_dist(b)    # 0.08228323 0.56916726 0.34854951
# condition C
a <- table(df1c$systype_input,df1c$systype_output)  # input on left, output on top
a
a/colSums(a)
a <- a/colSums(a)
stat_dist(t(a))
table(df1c$systype_input)
table(df1c$systype_output)
# condition C
a <- table(df1c$systype_input,df1c$systype_output)  # input on left, output on top
"             continuous disjoint
continuous         70        4     74 continuous in input
disjoint           43       90    133   disjoint in input
"
a <- a/rowSums(a)
a
stat_dist(t(a)) # needs rows to sum to one so give it the inverse
a
stat_dist(t(a)) # needs rows to sum to one so give it the inverse
rowSums(a)
stat_dist(a) # stat_dist() needs rows to sum to one
# condition I
b <- table(df1i$systype_input,df1i$systype_output)
table(df1i$systype_input)
# condition I
b <- table(df1i$systype_input,df1i$systype_output)
"             continuous disjoint
continuous        107       10    117 continuous in input
disjoint           54      264    318   disjoint in input
"
b/rowSums(b)
stat_dist(b)
# condition I
b <- table(df1i$systype_input,df1i$systype_output)
"             continuous disjoint
continuous        107       10    117 continuous in input
disjoint           54      264    318   disjoint in input
"
b <- b/rowSums(b)
"          continuous   disjoint
continuous 0.91452991 0.08547009
disjoint   0.16981132 0.83018868"
# condition I
b <- table(df1i$systype_input,df1i$systype_output)
b
b <- b/rowSums(b)
b
stat_dist(b)
# condition I
b <- table(df1i$systype_input,df1i$systype_output)
"             continuous disjoint
continuous        107       10    117 continuous in input
disjoint           54      264    318   disjoint in input
"
b <- b/rowSums(b)
"          continuous   disjoint
continuous 0.91452991 0.08547009
disjoint   0.16981132 0.83018868"
stat_dist(b)
a <- table(df2c$systype2_input,df2c$systype2_output)
a <- a/rowSums(a)
a
b <- table(df2i$systype2_input,df2i$systype2_output)
b <- b/rowSums(b)
b
stat_dist(a)
stat_dist(b)
# whole experiment
x <- table(df1$systype_input,df1$systype_output)  # input on left, output on top
x <- x/rowSums(x)
x
stat_dist(x)
# whole experiment
x <- table(df2$systype_input,df2$systype_output)  # input on left, output on top
x <- x/rowSums(x)
stat_dist(x)
0.08228323+0.56916726
###########################################################
df <- read.csv("~/Library/Mobile Documents/com~apple~CloudDocs/Research/PROJECTS/Category Change/Data/roundData FINAL.csv")
df <- df[-631,] # remove the one fork
df <- df[-441,] # RTs missing
# takes a variable like train_RTs and converts to vector
vectorizer <- function(factor_variable) {
return(as.integer(unlist(strsplit(as.character(factor_variable),","))))
}
###########################################################
# TRAIN TRIALS
###########################################################
# make data frame of train trial RTs (each col = one trial)
N <- length(df$participant)
rt_df <- data.frame(vectorizer(df$train_RTs[1])) # initialize data frame
all_rts <- c(vectorizer(df$train_RTs[1])) # and also dump all 19230 RTs together in one array
for (i in 2:N) {
rts <- vectorizer(df$train_RTs[i])
rt_df <- cbind(rt_df,rts)
all_rts <- c(all_rts,rts)
}
rt_df <- data.frame(t(rt_df)) # transpose data frame
###########################################################
# example data access
rt_df$X1 # first trial of all 641 participants
df <- read.csv("/Users/vferdinand/Library/Mobile Documents/com~apple~CloudDocs/Research/PROJECTS/Category Change/Data/experiment1_FINAL.csv")
df[441,]
# takes a variable like train_RTs and converts to vector
vectorizer <- function(factor_variable) {
return(as.integer(unlist(strsplit(as.character(factor_variable),","))))
}
# takes a variable like train_RTs and converts to vector
vectorizer <- function(factor_variable) {
return(as.integer(unlist(strsplit(as.character(factor_variable),","))))
}
###########################################################
# TRAIN TRIALS
###########################################################
# make data frame of train trial RTs (each col = one trial)
N <- length(df$participant)
rt_df <- data.frame(vectorizer(df$train_RTs[1])) # initialize data frame
all_rts <- c(vectorizer(df$train_RTs[1])) # and also dump all 19230 RTs together in one array
for (i in 2:N) {
rts <- vectorizer(df$train_RTs[i])
rt_df <- cbind(rt_df,rts)
all_rts <- c(all_rts,rts)
}
rt_df <- data.frame(t(rt_df)) # transpose data frame
rt_df <- data.frame(t(rt_df)) # transpose data frame
rt_df
rt_df$X1 # first trial of all 641 participants
names(df)
N <- length(df$participant)
rt_df <- data.frame(vectorizer(df$train_RTs[1])) # initialize data frame
all_rts <- c(vectorizer(df$train_RTs[1])) # and also dump all 19230 RTs together in one array
for (i in 2:N) {
rts <- vectorizer(df$train_RTs[i])
rt_df <- cbind(rt_df,rts)
all_rts <- c(all_rts,rts)
}
rt_df <- data.frame(t(rt_df)) # transpose data frame
rt_df
rt_df$X1 # first trial of all 641 participants
x <- seq(1,30)
y <- colMeans(rt_df)
sd <- apply(rt_df, 2, sd)
qplot(x,y) + labs(x = "train trial", y = "RTs")
# with standard deviations plotted
qplot(x,y) + geom_errorbar(aes(x=x, ymin=y-sd, ymax=y+sd), width=0.25) + labs(x = "train trial", y = "RTs")
qplot(x,y) + labs(x = "train trial", y = "RTs")
hist(all_rts) # k not helpful
min(all_rts)   # 8
max(all_rts)   # 1382657 = 23 minutes
mean(all_rts)  # 1835.157 = 1.8 seconds
sd(all_rts)    # 1 standard deviation = 11812 = 11 seconds
rt_df[rt_df > 33000] <- NA
y2 <- colMeans(rt_df, na.rm = TRUE)
# did it do anything? YEP
y # old col means
y2
x <- seq(1,30)
y <- colMeans(rt_df, na.rm = TRUE)
qplot(x,y) + labs(x = "train trial", y = "RTs")
N <- length(df$participant)
rt_df2 <- data.frame(vectorizer(df$test_RTs[1])) # initialize data frame
all_rts2 <- c(vectorizer(df$train_RTs[1])) # and also dump all 19230 RTs together in one array
for (i in 2:N) {
rts <- vectorizer(df$test_RTs[i])
rt_df2 <- cbind(rt_df2,rts)
all_rts2 <- c(all_rts2,rts)
}
rt_df2 <- data.frame(t(rt_df2)) # transpose data frame
min(all_rts2)   # 6
max(all_rts2)   # 506757 = 8.4 minutes
mean(all_rts2)  # 1737 = 1.7 seconds
sd(all_rts2)    # 9892 = 10 seconds
stim25_train <- c()
stim50_train <- c()
stim75_train <- c()
stim100_train <- c()
stim125_train <- c()
stim150_train <- c()
stim175_train <- c()
stim200_train <- c()
stim225_train <- c()
stim250_train <- c()
###################
inlier_max <- 33000  # rts above this val will be excluded
#inlier_max <- 10000000000
###################
N <- length(df$participant)
for (row in 1:N) {  # N = 641
stims <- vectorizer(df$trainset[row])
rts <- vectorizer(df$train_RTs[row])
for (i in 1:30) {
if (rts[i] < inlier_max) {
if (stims[i] == 0) { stim25_train <- c(stim25_train,rts[i]) }
if (stims[i] == 1) { stim50_train <- c(stim50_train,rts[i]) }
if (stims[i] == 2) { stim75_train <- c(stim75_train,rts[i]) }
if (stims[i] == 3) { stim100_train <- c(stim100_train,rts[i]) }
if (stims[i] == 4) { stim125_train <- c(stim125_train,rts[i]) }
if (stims[i] == 5) { stim150_train <- c(stim150_train,rts[i]) }
if (stims[i] == 6) { stim175_train <- c(stim175_train,rts[i]) }
if (stims[i] == 7) { stim200_train <- c(stim200_train,rts[i]) }
if (stims[i] == 8) { stim225_train <- c(stim225_train,rts[i]) }
if (stims[i] == 9) { stim250_train <- c(stim250_train,rts[i]) }
}
}
}
train_Ns <- c(length(stim25_train),length(stim50_train),length(stim75_train),length(stim100_train),length(stim125_train),length(stim150_train),length(stim175_train),length(stim200_train),length(stim225_train),length(stim250_train))
train_means <- c(mean(stim25_train),mean(stim50_train),mean(stim75_train),mean(stim100_train),mean(stim125_train),mean(stim150_train),mean(stim175_train),mean(stim200_train),mean(stim225_train),mean(stim250_train))
train_sds <- c(sd(stim25_train),sd(stim50_train),sd(stim75_train),sd(stim100_train),sd(stim125_train),sd(stim150_train),sd(stim175_train),sd(stim200_train),sd(stim225_train),sd(stim250_train))
plot(train_means,las=1,xlab="stimulus",ylab="RTs")
plot(train_sds,las=1,xlab="stimulus",ylab="SDs")
# one plot with sds
x <- seq(1,10)
y <- train_means
sd <- train_sds
qplot(x,y) + geom_errorbar(aes(x=x, ymin=y-sd, ymax=y+sd), width=0.25) + labs(x = "train trial", y = "RTs")
qplot(x,y) + geom_errorbar(aes(x=x, ymin=y-sd, ymax=y+sd), width=0.25) + labs(x = "stimulus", y = "RTs")
plot(train_means,las=1,xlab="stimulus",ylab="RTs")
plot(train_sds,las=1,xlab="stimulus",ylab="SDs")
# one plot with sds
x <- seq(1,10)
y <- train_means
sd <- train_sds
qplot(x,y) + geom_errorbar(aes(x=x, ymin=y-sd, ymax=y+sd), width=0.25) + labs(x = "stimulus", y = "RTs")
stim25_test <- c()
stim50_test <- c()
stim75_test <- c()
stim100_test <- c()
stim125_test <- c()
stim150_test <- c()
stim175_test <- c()
stim200_test <- c()
stim225_test <- c()
stim250_test <- c()
###################
inlier_max <- 30000  # rts above this val will be excluded
###################
N <- length(df$participant)
for (row in 1:N) {  # N = 641
stims <- vectorizer(df$testset[row])
rts <- vectorizer(df$test_RTs[row])
for (i in 1:10) {
if (rts[i] < inlier_max) {
if (stims[i] == 0) { stim25_test <- c(stim25_test,rts[i]) }
if (stims[i] == 1) { stim50_test <- c(stim50_test,rts[i]) }
if (stims[i] == 2) { stim75_test <- c(stim75_test,rts[i]) }
if (stims[i] == 3) { stim100_test <- c(stim100_test,rts[i]) }
if (stims[i] == 4) { stim125_test <- c(stim125_test,rts[i]) }
if (stims[i] == 5) { stim150_test <- c(stim150_test,rts[i]) }
if (stims[i] == 6) { stim175_test <- c(stim175_test,rts[i]) }
if (stims[i] == 7) { stim200_test <- c(stim200_test,rts[i]) }
if (stims[i] == 8) { stim225_test <- c(stim225_test,rts[i]) }
if (stims[i] == 9) { stim250_test <- c(stim250_test,rts[i]) }
}
}
}
test_Ns <- c(length(stim25_test),length(stim50_test),length(stim75_test),length(stim100_test),length(stim125_test),length(stim150_test),length(stim175_test),length(stim200_test),length(stim225_test),length(stim250_test))
test_means <- c(mean(stim25_test),mean(stim50_test),mean(stim75_test),mean(stim100_test),mean(stim125_test),mean(stim150_test),mean(stim175_test),mean(stim200_test),mean(stim225_test),mean(stim250_test))
test_sds <- c(sd(stim25_test),sd(stim50_test),sd(stim75_test),sd(stim100_test),sd(stim125_test),sd(stim150_test),sd(stim175_test),sd(stim200_test),sd(stim225_test),sd(stim250_test))
plot(test_means,las=1,xlab="stimulus",ylab="RTs")
plot(test_sds,las=1,xlab="stimulus",ylab="SDs")
# all on one plot
x <- seq(1,10)
y <- test_means
sd <- test_sds
qplot(x,y) + geom_errorbar(aes(x=x, ymin=y-sd, ymax=y+sd), width=0.25) + labs(x = "stimulus", y = "RTs")
# one plot with sds
x <- seq(1,10)
y <- train_means
sd <- train_sds
qplot(x,y) + geom_errorbar(aes(x=x, ymin=y-sd, ymax=y+sd), width=0.25) + labs(x = "stimulus", y = "RTs")
plot(train_means,las=1,xlab="stimulus",ylab="RTs",type="l",col="blue",ylim=c(1000,2000))
lines(test_means,las=1,xlab="stimulus",ylab="RTs",type="l",col="orange")
plot(train_means,las=1,xlab="stimulus",ylab="RTs",col="blue",ylim=c(1000,2000))
points(test_means,las=1,xlab="stimulus",ylab="RTs",col="orange")
# inprog...
x <- seq(1,10)
y <- train_means
qplot(x,y)+lines(test_means,color="blue")
plot(train_means,las=1,xlab="stimulus",ylab="RTs",type="l",col="blue",ylim=c(1000,2000))
lines(test_means,las=1,xlab="stimulus",ylab="RTs",type="l",col="orange")
names(rt_df)
head(rt_df)
df1 <- read.csv("/Users/vanferdi/Library/Mobile Documents/com~apple~CloudDocs/Research/PROJECTS/Category Change/GITHUB REPO/Data/experiment1_FINAL.csv")
df2 <- read.csv("/Users/vanferdi/Library/Mobile Documents/com~apple~CloudDocs/Research/PROJECTS/Category Change/GITHUB REPO/Data/experiment2_FINAL.csv")
a <- "1111100000"
b <- "1011100000" # 1 change
c <- "0111100001" # 2 changes
d <- "1101011101" # 6 changes
# Levenshtein distance function is adist()
# will just give the number of labels that flipped
adist(a,b)
adist(a,c)
adist(a,d)
# try it on two strings in the dataframe
a <- df1$system512[1]
b <- df1$system512[6]
adist(a,b)
# get edit distance for each pair of input-output systems in the data
get_edits_512 <- function(d) {
edits <- c()
for (i in 1:nrow(d)) {
edit <- adist(d$system512_input[i],d$system512[i])
#print(d$system512_input[i])
#print(d$system512[i])
#print(edit)
edits <- c(edits,edit)
}
return(edits)
}
# append new column to each dataframe - contains the number of label flips (edits) between input and output 512 system
edits <- get_edits_512(df1)
df1 <- cbind(df1,edits)
edits <- get_edits_512(df2)
df2 <- cbind(df2,edits)
df1c <- subset(df1,condition=="C")
df1i <- subset(df1,condition=="I")
df2c <- subset(df2,condition=="C")
df2i <- subset(df2,condition=="I")
#####################################
# Does it have to use the 1024 system or are the answers the same anyway using the 512 system?
get_edits_1024 <- function(d) {
edits <- c()
for (i in 1:nrow(d)) {
edit <- adist(d$system1024_input[i],d$system1024[i])
edits <- c(edits,edit)
}
return(edits)
}
e1 <- get_edits_512(df1)
e2 <- get_edits_1024(df1)
# ah crap that style of answer doesn't work because the 1024 systems initial zeros are removed!
cbind(e1,e2,df1$system1024)
#####################################
# Which systems showed zero edits? These should be fairly stable systems.  124 systems
subset(df1,edits==0)$system512
# What were their number of boundaries?   1-5 boundaries, all >5 were unstable
table(subset(df1,edits==0)$N_boundaries)
# show many of each zero-edit event occurred per zero-edit system
table(subset(df1,edits==0)$system512,subset(df1,edits==0)$edits)
# rank them - Experiment 1
"
1111100000 19
1111110000 13
1111111000 12
1111111100 10
1111000000  9
1110000000  8
1100000000  6
1100000001  5
1000000011  4
1111110001  4
1111111110  4
none        3
1000000000  2
1000000001  2
1100000010  2
1100000011  2
1110000001  2
1111100010  2
1111111001  2
several     1
"
# the most stable system is 1111100000
# had 19 perfect reproductions (19 is the max for zero-edit systems)
# look at the same thing for Experiment 2
table(subset(df2,edits==0)$system512,subset(df2,edits==0)$edits)
"
1111000000 30
1111100000 20
1111110000 14
1111111111 14
1110000000 11
1111111000  5
"
# divide the above counts by the total number of counts per system type
nrow(subset(df1,system512=="1111100000")) # 63
# For all edit distances, show edit distance by number of boundaries
# left = boundaries (), top = number of edits (0-9)
table(df1$N_boundaries,df1$edits)
# TO DO - plot the table above nicely
##########################################################################
# what are the TPs among N_boundaries?
table(df1$N_boundaries_input,df1$N_boundaries)
" in is rows, out is on top"
"   1   2   3   4   5   6   7   8
1 177   0  11   2   1   0   0   0
2  12  78   8   8   0   0   0   0
3  46   1  42   4   7   2   1   1
4   3  37   7  28   2   7   1   1
5  20   4  18   4  25   0   3   0
6   8  10   7  16   3   5   0   0
7   8   2   6   3   2   2   1   0
8   0   1   1   4   0   0   2   0"
systype_input <- if(df1$N_boundaries_input==1){"continuous"}
ifelse(df1$N_boundaries_input==1, "continuous", "disjoint")
systype_input <- ifelse(df2$N_boundaries_input==0, "-degenerate", ifelse(df2$N_boundaries_input==1, "continuous", "disjoint"))
cbind(df2$N_boundaries_input,x)
##########################################################################
# what are the TPs among continuous and disjoint systems?
# add to df a column that categorizes input and output systems into 3 types
systype_input <- ifelse(df1$N_boundaries_input==0, "-degenerate", ifelse(df1$N_boundaries_input==1, "continuous", "disjoint"))
systype_output <- ifelse(df1$N_boundaries==0, "-degenerate", ifelse(df1$N_boundaries==1, "continuous", "disjoint"))
df1 <- cbind(df1,systype_input,systype_output)
systype_input <- ifelse(df2$N_boundaries_input==0, "-degenerate", ifelse(df2$N_boundaries_input==1, "continuous", "disjoint"))
systype_output <- ifelse(df2$N_boundaries==0, "-degenerate", ifelse(df2$N_boundaries==1, "continuous", "disjoint"))
df2 <- cbind(df2,systype_input,systype_output)
# have a second version where you group the degenerate ones with continuous ones
systype2_input <- ifelse(df1$N_boundaries_input==0, "continuous", ifelse(df1$N_boundaries_input==1, "continuous", "disjoint"))
systype2_output <- ifelse(df1$N_boundaries==0, "continuous", ifelse(df1$N_boundaries==1, "continuous", "disjoint"))
df1 <- cbind(df1,systype2_input,systype2_output)
systype2_input <- ifelse(df2$N_boundaries_input==0, "continuous", ifelse(df2$N_boundaries_input==1, "continuous", "disjoint"))
systype2_output <- ifelse(df2$N_boundaries==0, "continuous", ifelse(df2$N_boundaries==1, "continuous", "disjoint"))
df2 <- cbind(df2,systype2_input,systype2_output)
df1c <- subset(df1,condition=="C")
df1i <- subset(df1,condition=="I")
df2c <- subset(df2,condition=="C")
df2i <- subset(df2,condition=="I")
a <- table(df1$systype_input,df1$systype_output)  # input on left, output on top
"          continuous disjoint
continuous        177       14
disjoint           97      354
"
b <- table(df2$systype_input,df2$systype_output)
"            degenerate continuous disjoint
degenerate           14          2        3
continuous            4        186       43
disjoint             15        134      291
"
all_ins <- unlist(list(df1$systype_input,df2$systype_input))
all_outs <- unlist(list(df1$systype_output,df2$systype_output))
all <- table(all_ins,all_outs)
# normalize to each row sums to one
pall <- all/rowSums(all)
# get stationary distribution
stat_dist <- function(matrix) { # returns the stationary distribution of a RIGHT stochastic matrix (rows sum to one)
vec <- eigen(t(matrix))$vectors[,1]
return(vec/sum(vec))
}
stat_dist(pall) # 0.6264775  0.3299556  0.0435669
a <- a/rowSums(a)
b <- b/rowSums(b)
stat_dist(a)    # 0          0.7458234  0.2541766
stat_dist(b)    # 0.08228323 0.56916726 0.34854951
df1$iteration
# and there should be no condition difference between the TPs when calculated for generation = 1 only
df1g1 <- subset(df1,iteration==1)
df1g1$iteration
# and there should be no condition difference between the TPs when calculated for generation = 1 only
df1ig1 <- subset(df1i,iteration==1)
df1cg1 <- subset(df1c,iteration==1)
df1c$iteration
df1cg1$iteration
i <- table(df1ig1$systype_input,df1ig1$systype_output)
i <- i/rowSums(i)
i
c <- table(df1cg1$systype_input,df1cg1$systype_output)
c <- c/rowSums(c)
c
names(df1ig1)
table(df1ig1$systype_input)
table(df1cg1$systype_input) #
table(df2$systype2_input)
table(df2$systype_input)
# whole experiment
x <- table(df2$systype2_input,df2$systype2_output)  # input on left, output on top
x <- x/rowSums(x)
stat_dist(x)
# first generation only - should be similar
df2ig1 <- subset(df2i,iteration==1)
df2cg1 <- subset(df2c,iteration==1)
i <- table(df2ig1$systype_input,df2ig1$systype_output)
i <- i/rowSums(i)
i
# first generation only - should be similar
df2ig1 <- subset(df2i,iteration==1)
df2cg1 <- subset(df2c,iteration==1)
i <- table(df2ig1$systype2_input,df2ig1$systype2_output)
i <- i/rowSums(i)
i
source('~/Library/Mobile Documents/com~apple~CloudDocs/Research/PROJECTS/Category Change/GITHUB REPO/Analyses/edit_distance.R', echo=TRUE)
c <- table(df2cg1$systype2_input,df2cg1$systype2_output)
c <- c/rowSums(c)
c
